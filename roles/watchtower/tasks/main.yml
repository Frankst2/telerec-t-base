- name: "Ensure watchtower stack is {{ service_watchtower }}"
  docker_compose:
    project_name: watchtower
    definition:
      version: "3.7"
      services:
        app:
          container_name: watchtower
          image: containrrr/watchtower
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
          environment:
            - TZ={{ timezone }}
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_LIFECYCLE_HOOKS=1 # Enable pre/post-update scripts
            - WATCHTOWER_HTTP_API_UPDATE=true
            - "WATCHTOWER_HTTP_API_TOKEN={{ watchtower.watchtower_http_token }}"
            - WATCHTOWER_HTTP_API_PERIODIC_POLLS=true
            - WATCHTOWER_NOTIFICATIONS=shoutrrr
#            - "WATCHTOWER_NOTIFICATION_URL=telegram://{{ telegram_bot_token }}@telegram/?channels={{ telegram_channel_id }}"
          labels:
            # general settings
            - "traefik.enable=true"
            - "traefik.docker.network=traefik_default"
            - "traefik.http.services.watchtower.loadbalancer.server.port=8080"
            # web router
            - "traefik.http.routers.watchtower_web.EntryPoints=web-secure"
            - "traefik.http.routers.watchtower_web.rule=Host(`watchtower.{{ main_domain }}`)"
            - "traefik.http.routers.watchtower_web.service=watchtower"
            - "traefik.http.routers.watchtower_web.tls=true"
            - "traefik.http.routers.watchtower_web.tls.certresolver=default"
      networks:
        traefik_net:
          external:
            name: traefik_default
    recreate: "{{ (service_watchtower == 'started') | ternary('smart', 'always') }}"
    state: "{{ (service_watchtower in ['started', 'stopped', 'restarted']) | ternary('present', 'absent') }}"
    stopped: "{{ service_watchtower == 'stopped' }}"
    restarted: "{{ service_watchtower == 'restarted' }}"
    remove_images: "{{ (service_watchtower == 'purged') | ternary('all', 'local') }}"
    remove_orphans: "{{ service_watchtower == 'purged' }}"
  register: watchtower_stack
  when: service_watchtower != "absent"


# to disable a container
#LABEL com.centurylinklabs.watchtower.enable="false"
# to trigger a scan
#curl -H "Authorization: Bearer {{ watchtower.watchtower_http_token }}" https://watchtower.pinyto.de/v1/update